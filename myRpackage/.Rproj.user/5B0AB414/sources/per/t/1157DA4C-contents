---
title: "Predictive Analysis"
author: "Yu Wang (yw78)"
date: "2023-05-10"
output: html_document
---

## Data Preprocessing and Feature Engineering
```{r}
library(dplyr)
library(tidyr)
library(CatEncoders)
# Select the columns for the features
# Use location types from Plot 3
df_new <- df_clean %>%
  select(location_description, beat, district, ward, community_area, latitude, longitude, crime_type, season, arrest) %>%
  filter(location_description %in% df_location_counts$Var1) 
df_new$arrest = ifelse(df_new$arrest == TRUE, 1, 0)

# Remove missing records
df_new <- na.omit(df_new)

# Convert the character strings to factors
df_new$location_description <- as.factor(df_new$location_description)

# One-hot encode the categorical variables into dummy variables
df_new <- df_new %>%
  ungroup() %>%
  mutate(season_summer=ifelse(season=='Summer',1,0),
         season_winter=ifelse(season=='Winter',1,0),
         season_spring=ifelse(season=='Spring',1,0),
         season_fall=ifelse(season=='Fall',1,0)) 
```


```{r}
# Encode categorical variables into numerical ones
labs1 = LabelEncoder.fit(df_new$location_description)
   #convert labels to numeric values
df_new$location_description = transform(labs1, df_new$location_description)

labs6 = LabelEncoder.fit(df_new$crime_type)
df_new$crime_type = transform(labs6, df_new$crime_type)

# Ordinal Encoding
df_new$beat <- as.numeric(factor(df_new$beat, levels = unique(df_new$beat), exclude = NULL))

df_new$district <- as.numeric(factor(df_new$district, levels = unique(df_new$district), exclude = NULL))

df_new$ward <- as.numeric(factor(df_new$ward, levels = unique(df_new$ward), exclude = NULL))
df_new$community_area <- as.numeric(factor(df_new$community_area, levels = unique(df_new$community_area), exclude = NULL))

df_new <- df_new[,-9]

head(df_new)
```



```{r}
# calculate correlation matrix
library(corrplot)
M <- df_new %>% 
  ungroup() %>%
  select(location_description, beat,district, ward, community_area,latitude, longitude, crime_type) %>%
  cor()

# correlation plot
corrplot.mixed(M, order = "hclust", number.cex = 0.9)
```
## Data Partition 
```{r}
library(caret)
library(dplyr)
library(MASS)

# Split the dataset into training and testing sets
set.seed(123)
train_index <- createDataPartition(df_new$arrest, p = 0.8, list = FALSE)
train <- df_new[train_index, ]
test <- df_new[-train_index, ]
```


```{r}
# Fit a logistic regression model with selected features
library(car)

glm_fit <- glm(arrest ~ ., data = train, family = "binomial")
summary(glm_fit)
avPlots(glm_fit)
# Make predictions on the testing set
predictions <- predict(glm_fit, newdata = test, type = "response")
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
```

```{r}
# Evaluate the model performance on the testing set
confusionMatrix(data = as.factor(predicted_classes), reference = as.factor(test$arrest))
```
```{r}
ggplot(test, aes(x=beat, y=arrest)) +
  geom_point() +
  stat_smooth(method="glm", color="green", se=FALSE,
                method.args = list(family=binomial))
```




